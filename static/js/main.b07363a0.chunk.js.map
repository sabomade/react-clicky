{"version":3,"sources":["components/Nav/index.js","components/Header/index.js","components/Wrapper/index.js","components/BadgeCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","info","count","topScore","Header","Wrapper","children","BadgeCard","src","image","alt","name","onClick","handleClick","App","state","badges","clicked","shuffle","arr","temp","index","arr2","i","length","Math","floor","random","id","console","log","checkArray","filter","click","setState","push","stickers","shuffledBadges","this","map","badge","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"y0BAeeA,MAZf,SAAaC,GACX,OACE,yBAAKC,UAAU,oBACb,0BAAMA,UAAU,eAAhB,eACA,0BAAMA,UAAU,eAAeD,EAAME,MACrC,0BAAMD,UAAU,eAAhB,UACUD,EAAMG,MADhB,iBACqCH,EAAMI,Y,MCQlCC,MAdf,SAAgBL,GACd,OACE,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,eACA,uBAAGA,UAAU,QAAb,0G,MCDOK,MAJf,SAAiBN,GACf,OAAO,yBAAKC,UAAU,aAAaD,EAAMO,W,MCY5BC,MAbf,SAAmBR,GACjB,OACE,yBAAKC,UAAU,QACb,yBACEQ,IAAKT,EAAMU,MACXT,UAAU,eACVU,IAAKX,EAAMY,KACXC,QAASb,EAAMc,gBCqFRC,E,2MAtFbC,MAAQ,CACNC,SACAd,MAAO,EACPe,QAAS,GACTd,SAAU,EACVF,KAAM,+B,EAGRiB,QAAU,SAAAC,GAKR,IAJA,IAEIC,EACAC,EAHAC,EAAI,YAAOH,GACXI,EAAID,EAAKE,OAGND,EAAI,GACTF,EAAQI,KAAKC,MAAMD,KAAKE,SAAWJ,GAEnCH,EAAOE,IADPC,GAEAD,EAAKC,GAAKD,EAAKD,GACfC,EAAKD,GAASD,EAEhB,OAAOE,G,EAGTT,YAAc,SAAAe,GACZC,QAAQC,IAAI,qBAAsB,EAAKf,MAAME,SAE7C,IAAMc,EAAa,EAAKhB,MAAME,QAAQe,QAAO,SAAAC,GAAK,OAAIA,IAAUL,KAChEC,QAAQC,IAAI,aAAcC,GAEA,IAAtBA,EAAWP,QAET,EAAKT,MAAMZ,WAAa,EAAKY,MAAMb,OACrC,EAAKgC,SAAS,CAAE/B,SAAU,EAAKY,MAAMZ,SAAW,IAGlD,EAAK+B,SAAS,CACZhC,MAAO,EAAKa,MAAMb,MAAQ,EAC1BD,KAAM,kCAGR,EAAKiC,UAAS,SAAAnB,GACIA,EAAME,QAAQkB,KAAKP,OAKrC,EAAKM,SAAS,CACZjC,KAAM,oBACNC,MAAO,EACPe,QAAS,KAKb,IAAMmB,EAAW,EAAKrB,MAAMC,OAC5Ba,QAAQC,IAAI,WAAYM,GACxB,IAAMC,EAAiB,EAAKnB,QAAQkB,GACpCP,QAAQC,IAAI,iBAAkBO,GAC9BR,QAAQC,IAAI,mBACZ,EAAKI,SAAS,CAAElB,OAAQqB,K,wEAGhB,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CACEpC,KAAMqC,KAAKvB,MAAMd,KACjBC,MAAOoC,KAAKvB,MAAMb,MAClBC,SAAUmC,KAAKvB,MAAMZ,WAEvB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACGmC,KAAKvB,MAAMC,OAAOuB,KAAI,SAAAC,GAAK,OAC1B,kBAAC,EAAD,CACEC,IAAKD,EAAMZ,GACXjB,KAAM6B,EAAM7B,KACZF,MAAO+B,EAAM/B,MACbI,YAAa,kBAAM,EAAKA,YAAY2B,EAAMZ,gB,GA9EtCc,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.b07363a0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar fixed-top\">\n      <span className=\"navbar-text\">Clicky Game</span>\n      <span className=\"navbar-text\">{props.info}</span>\n      <span className=\"navbar-text\">\n        Score: {props.count} | Top Score: {props.topScore}\n      </span>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Clicky Game</h1>\n        <p className=\"lead\">\n          Click on am image to score a point. Be careful not to click on the\n          same image twice or you'll lose!\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction BadgeCard(props) {\n  return (\n    <div className=\"card\">\n      <img\n        src={props.image}\n        className=\"card-img-top\"\n        alt={props.name}\n        onClick={props.handleClick}\n      />\n    </div>\n  );\n}\n\nexport default BadgeCard;\n","import React, { Component } from \"react\";\nimport badges from \"./badges.json\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport BadgeCard from \"./components/BadgeCard\";\n\nclass App extends Component {\n  state = {\n    badges,\n    count: 0,\n    clicked: [],\n    topScore: 0,\n    info: \"Click on an image to begin!\"\n  };\n\n  shuffle = arr => {\n    let arr2 = [...arr];\n    let i = arr2.length;\n    let temp;\n    let index;\n    while (i > 0) {\n      index = Math.floor(Math.random() * i);\n      i--;\n      temp = arr2[i];\n      arr2[i] = arr2[index];\n      arr2[index] = temp;\n    }\n    return arr2;\n  };\n\n  handleClick = id => {\n    console.log(\"this.state.clicked\", this.state.clicked);\n    //check if item was already clicked\n    const checkArray = this.state.clicked.filter(click => click === id);\n    console.log(\"checkArray\", checkArray);\n    //if item was not already clicked\n    if (checkArray.length === 0) {\n      //change topScore when equal to socre\n      if (this.state.topScore === this.state.count) {\n        this.setState({ topScore: this.state.topScore + 1 });\n      }\n      //increase score & update game info\n      this.setState({\n        count: this.state.count + 1,\n        info: \"Great Job! You guessed right!\"\n      });\n      //add item to this.state.clicked array\n      this.setState(state => {\n        const clicked = state.clicked.push(id);\n        // return clicked;\n      });\n      // console.log(\"items that have been clicked: \", this.state.clicked);\n    } else {\n      this.setState({\n        info: \"Wrong! Try again.\",\n        count: 0,\n        clicked: []\n      });\n    }\n\n    //reshuffle cards in DOM\n    const stickers = this.state.badges;\n    console.log(\"stickers\", stickers);\n    const shuffledBadges = this.shuffle(stickers);\n    console.log(\"shuffledBadges\", shuffledBadges);\n    console.log(\"===============\");\n    this.setState({ badges: shuffledBadges });\n  };\n\n  render() {\n    return (\n      <>\n        <Nav\n          info={this.state.info}\n          count={this.state.count}\n          topScore={this.state.topScore}\n        />\n        <Header />\n        <Wrapper>\n          {this.state.badges.map(badge => (\n            <BadgeCard\n              key={badge.id}\n              name={badge.name}\n              image={badge.image}\n              handleClick={() => this.handleClick(badge.id)}\n            />\n          ))}\n        </Wrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}